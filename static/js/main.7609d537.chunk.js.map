{"version":3,"sources":["assets/menu1.jpg","assets/griddysin.jpg","assets/Griddys_Doughnuts.png","styles/index.js","components/Grid.js","components/Landing.js","components/Menu.js","components/Inside.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InsideContainer","styled","div","inside","menu","ContentBorder","ContentContainer","GridBackground","Buttons","ButtonsGrid","ButtonsRows","operations","generateEmptyGrid","rows","i","push","Array","from","Grid","useState","grid","setGrid","speed","setSpeed","speedRef","useRef","current","running","setRunning","runningRef","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","to","style","marginBottom","className","onClick","Math","random","display","gridTemplateColumns","border","map","col","key","newGrid","width","height","backgroundColor","undefined","borderRadius","Container","griddys","Landing","Menu","Inside","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7609d537.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/menu1.225f9b08.jpg\";","module.exports = __webpack_public_path__ + \"static/media/griddysin.1f94ecb0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Griddys_Doughnuts.6497df47.png\";","import styled from 'styled-components'\n\nimport inside from '../assets/griddysin.jpg'\nimport menu from '../assets/menu1.jpg'\n\nexport const InsideContainer = styled.div`\n    background-image: url(${inside});\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items; center;\n\n        div.grid {\n            min-width: 623px;\n        }\n\n        div.inner {\n            background-image: url(${menu});\n        }\n\n        div.menu {\n            min-width: 700px;\n        }\n\n        button {\n            width: 10rem;\n            padding: .25rem 1rem;\n            border: #A74104 solid 2px;\n            color: #A74104; \n            font-size: 1.8rem;\n            border-radius: 10px;\n            background-color: #F9CC83;\n            font-family: 'Bangers', cursive;\n        }\n\n        p{\n            font-family: 'Bangers', cursive;\n            font-size: 1.6rem;\n            color: #111111;\n            line-height: 1.5rem;\n            letter-spacing: .03rem;\n            margin: 0;\n            padding: 0.3rem 0;\n        }\n\n        h2{\n            font-family: 'Bangers', cursive;\n            font-size: 2.5rem;\n            letter-spacing: .15rem;\n            color: #F39D63;\n            -webkit-text-stroke-width: 1px;\n            -webkit-text-stroke-color: #A74104;\n            letter-spacing: .2rem;\n            padding: .5rem 0 .5rem 0;\n            margin: 0;\n        }\n        h3{\n            font-family: 'Bangers', cursive;\n            font-size: 1.8rem;\n            letter-spacing: .15rem;\n            color: #F39D63;\n            -webkit-text-stroke-width: 1px;\n            -webkit-text-stroke-color: #A74104;\n            padding: 0;\n            margin: 0;\n        }\n`\nexport const ContentBorder = styled.div`\n    width: 40%;\n    padding: .5rem;\n    margin: 0 auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #F9CC83;\n    min-width: 450px;\n        \n        div.menu-content{\n            background-image: url(${menu});\n            text-align: left;\n            display: flex;\n            justify-content: flex-end;\n            border: #A74104 solid 2px;\n\n            p {\n                padding: 1rem;\n                background-color: #EDFFED;\n            }\n        }\n`\n\nexport const ContentContainer = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    border: #A74104 solid 2px;\n    background-color: #EDFFED;\n    border-radius: 10px;\n    padding: 1.5rem 3rem;\n        \n    div.back {\n        justify-content: center;\n        margin-top: 0.5rem;\n        padding: 0;\n    }\n`\n\nexport const GridBackground = styled.div`\n    background-color: #EDFFED;\n    margin-top: 1.8rem;\n`\n\nexport const Buttons = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 2rem 0 1rem;\n`\n\nexport const ButtonsGrid = styled.div`\n    border: #A74104 solid 2px;\n    border-radius: 10px;\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    padding: .3rem;\n    margin-top: .5rem;\n    margin-bottom: 0;\n    min-width: 510px;\n    background-color: #EDFFED;\n`\n\nexport const ButtonsRows = styled.div`\n    width: 85%;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n\n    button {\n        width: 6rem;\n        padding: .3rem;\n        font-size: 1.2rem;\n        margin: .3rem 0rem .3rem 1.5rem;\n    }\n`","import  React, { useState, useCallback, useRef} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { InsideContainer, ContentBorder, ContentContainer, ButtonsGrid, Buttons, GridBackground, ButtonsRows } from '../styles';\n\nimport produce from 'immer';\n\n// number of rows and columns in grid\nconst numRows = 25;\nconst numCols = 30;\n\n// determining neighbors\nconst operations = [\n    [0, 1],\n    [0, -1],\n    [1, -1],\n    [-1, 1],\n    [1, 1],\n    [-1, -1],\n    [1, 0],\n    [-1, 0]\n];\n\nconst generateEmptyGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n        rows.push(Array.from(Array(numCols), () => 0));\n    }\n    return rows;\n};\n\nfunction Grid() {\n\n    // set initial grid state\n    const [grid, setGrid] = useState(() => {\n        return generateEmptyGrid();\n    });\n\n    //set speed state\n    const [speed, setSpeed] = useState(100)\n    \n    // set speed reference for sim\n    const speedRef = useRef(speed);\n        speedRef.current = speed;\n\n    // set running state\n    const [running, setRunning] = useState(false);\n    \n    // set running reference for sim\n    const runningRef = useRef(running);\n        runningRef.current = running;\n\n    // function for running simulation\n    const runSimulation = useCallback(() => {\n        if (!runningRef.current) {\n            return;\n        }\n    \n        setGrid(g => {\n            return produce(g, gridCopy => {\n            for (let i = 0; i < numRows; i++) {\n                for (let k = 0; k < numCols; k++) {\n                let neighbors = 0;\n                operations.forEach(([x, y]) => {\n                    const newI = i + x;\n                    const newK = k + y;\n                    if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                    neighbors += g[newI][newK];\n                    }\n                });\n    \n                if (neighbors < 2 || neighbors > 3) {\n                    gridCopy[i][k] = 0;\n                } else if (g[i][k] === 0 && neighbors === 3) {\n                    gridCopy[i][k] = 1;\n                }\n                }\n            }\n            });\n        });\n    \n        setTimeout(runSimulation, speedRef.current );\n    }, []);\n\n    return(\n        <InsideContainer>\n    \n        <Link to='inside'>\n            <button\n                style={{\n                    marginBottom: \".5rem\"\n                }}\n                >\n                Back\n            </button>\n        </Link>\n\n        <ContentBorder className=\"grid\">\n        <ContentContainer className=\"inner\">\n        \n        \n        <ButtonsGrid>\n        \n        <ButtonsRows>\n        <h3>Presets: </h3>\n            <button\n                onClick={() => {\n                const rows = [];\n                for (let i = 0; i < numRows; i++) {\n                    rows.push(\n                    Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n                    );\n                }\n                setGrid(rows);\n                }}\n            >\n            Random\n            </button>\n\n        \n        </ButtonsRows>\n            <ButtonsRows>\n            <h3>Speed: </h3>\n                <button\n                    onClick={() => {\n                        setSpeed(1000);\n                        }}\n                > Slow </button>\n                <button\n                    onClick={() => {\n                        setSpeed(100);\n                        }}\n                > Normal </button>\n                <button\n                    onClick={() => {\n                    setSpeed(10);\n                    }}\n                >Fast</button>\n            </ButtonsRows>\n        </ButtonsGrid>\n\n        <GridBackground>\n        <div\n            style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${numCols}, 17px)`,\n            border: \"1px solid #111111\",\n            }}\n        >\n            {grid.map((rows, i) =>\n            rows.map((col, k) => (\n                <div\n                key={`${i}-${k}`}\n                onClick={() => {\n                    const newGrid = produce(grid, gridCopy => {\n                    gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                    });\n                    setGrid(newGrid);\n                }}\n                style={{\n                    width: 17,\n                    height: 17,\n                    backgroundColor: grid[i][k] ? \"#CE6732\" : undefined,\n                    border: \"solid 1px #555555\",\n                    borderRadius: \"5px\"\n                }}\n                />\n            ))\n            )}\n            </div>\n            </GridBackground>\n\n            <Buttons>\n                <button\n                    onClick={() => {\n                    setRunning(!running);\n                    if (!running) {\n                        runningRef.current = true;\n                        runSimulation();\n                    }\n                    }}\n                >\n                    {running ? \"Stop\" : \"Start\"}\n                </button>\n                <p>\n                Generation:\n                </p>\n                <button\n                    onClick={() => {\n                    setSpeed(100)\n                    setGrid(generateEmptyGrid())\n                    }}\n                    \n                >\n                    Reset\n                </button>\n            </Buttons>\n\n            </ContentContainer>\n            </ContentBorder>\n        </InsideContainer>\n    )\n} \n\nexport default Grid\n\n\n\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport griddys from '../assets/Griddys_Doughnuts.png';\n\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    background-image: url(${griddys});\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n        button{\n            width: 10rem;\n            padding: .25rem 1rem;\n            border: #E3856D solid 3px;\n            color: #E3856D; \n            font-size: 1.8rem;\n            border-radius: 10px;\n            background-color: #F7DB91;\n            font-family: 'Bangers', cursive;\n        }\n`\n\nfunction Landing() {\n\n    return(\n        \n        <Container>\n            <Link to='/inside'>\n                <button>\n                Enter\n                </button>\n            </Link>\n        </Container>\n    )\n}\n\nexport default Landing","import React from 'react';\n\nimport { Link } from 'react-router-dom'\n\nimport { InsideContainer, ContentContainer, ContentBorder, Buttons } from '../styles/'\n\nfunction Menu(){\n\n    return(\n        <InsideContainer>\n            <ContentBorder className=\"menu\">\n            <ContentContainer className=\"menu-content\">\n            <div>\n                <h2>Conway's Game of Life</h2>\n                <p>\n                The Game of Life is a cellular automaton devised by the British mathematician John Horton Conway in 1970. It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves.\n                </p>\n                <h2>Rules</h2>\n                <p>1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.</p>\n                <p>2. Any live cell with two or three live neighbours lives on to the next generation.</p>\n                <p>3. Any live cell with more than three live neighbours dies, as if by overpopulation.</p>\n                <p>4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</p>\n            </div>\n                <Buttons>\n                    <Link to=\"/grid\">\n                        <button>\n                            Play\n                        </button>\n                    </Link>\n\n                    <Link to=\"/inside\">\n                        <button>\n                            Back\n                        </button>\n                    </Link>\n                </Buttons>\n            </ContentContainer>\n            </ContentBorder>\n        </InsideContainer>\n    )\n}\n\nexport default Menu","import React from 'react';\n\nimport { Link } from 'react-router-dom'\n\nimport { InsideContainer, ContentBorder, ContentContainer, Buttons } from '../styles';\n\nfunction Inside(){\n    return(\n        <InsideContainer>\n            <ContentBorder>\n            <ContentContainer>\n                <h2>\n                    Welcome to Griddy's! \n                </h2>    \n                <Buttons>\n                    <Link to='/menu'>\n                    <button>\n                        Menu\n                    </button>\n                    </Link>\n\n                    <Link to='/grid'>\n                    <button >\n                        Play\n                    </button>\n                    </Link>\n                </Buttons>\n                <Buttons className=\"back\">\n                <Link to='/'>\n                    <button >\n                        Back\n                    </button>\n                    </Link>\n                </Buttons>\n            </ContentContainer>\n            </ContentBorder>\n\n        </InsideContainer>\n    )\n}\n\nexport default Inside","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Grid from './components/Grid';\nimport Landing from './components/Landing';\nimport Menu from './components/Menu';\nimport Inside from './components/Inside'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{height: '100vh', backgroundColor: '#282c34'}}>\n        <Route exact path=\"/\" component={Landing}/>\n        <Route path=\"/grid\" component={Grid} />\n        <Route path=\"/inside\" component={Inside} />\n        <Route path=\"/menu\" component={Menu} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}